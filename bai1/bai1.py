import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
import requests
from PIL import Image
import matplotlib.pyplot as plt
import os

# ---------------------------
# B∆∞·ªõc 1: Ki·ªÉm tra m√¥i tr∆∞·ªùng
# ---------------------------
print("TensorFlow Version:", tf.__version__)

# ---------------------------
# B∆∞·ªõc 2: T·∫£i m√¥ h√¨nh MobileNet V2
# ---------------------------
model_url = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4"
model = hub.load(model_url)
print("‚úÖ Model loaded successfully!")

# ---------------------------
# B∆∞·ªõc 3: T·∫£i h√¨nh ·∫£nh v√† ti·ªÅn x·ª≠ l√Ω
# ---------------------------
image_url = "https://scontent.fsgn2-9.fna.fbcdn.net/v/t39.30808-6/480706380_1152657306527608_3250749965564134057_n.jpg?stp=cp6_dst-jpg_tt6&_nc_cat=106&ccb=1-7&_nc_sid=127cfc&_nc_ohc=vElVpgeSd5cQ7kNvgFawCaN&_nc_oc=Adhn6WC83Rtf8t8MMu7_Ikuy6JwWTmuNy7oS-1pqW7yLxOYn7oW5QM3hTmmoGRY91sPNz0Tt7ZuM0Zhdgami-Nmr&_nc_zt=23&_nc_ht=scontent.fsgn2-9.fna&_nc_gid=AhSPkf7yx3wiGtYrilte3Gk&oh=00_AYA8F2_fvsoY3zbOsZUEDARSZXS5Pl4CHufSLsGrYr3r5A&oe=67BDE326"
save_path = "D:/vtc/python/bai1/pug.jpg"  # ƒê·ªïi sang th∆∞ m·ª•c h·ª£p l·ªá


# L·∫•y t√™n ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n
image_name = os.path.basename(save_path)

# Ki·ªÉm tra th∆∞ m·ª•c, n·∫øu ch∆∞a c√≥ th√¨ t·∫°o
os.makedirs(os.path.dirname(save_path), exist_ok=True)

# T·∫£i ·∫£nh v·ªÅ m√°y
response = requests.get(image_url)
if response.status_code == 200:
    with open(save_path, "wb") as file:
        file.write(response.content)
    print(f"‚úÖ ƒê√£ t·∫£i ·∫£nh v·ªÅ: {image_name}")
else:
    print("‚ùå L·ªói t·∫£i ·∫£nh!")

# M·ªü ·∫£nh v√† resize v·ªÅ 224x224
image = Image.open(save_path).resize((224, 224))

# Hi·ªÉn th·ªã ·∫£nh
plt.imshow(image)
plt.axis('off')
plt.title(f"·∫¢nh: {image_name}")
plt.show()

# 2. Ti·ªÅn x·ª≠ l√Ω h√¨nh ·∫£nh
def preprocess_image(image):
    """
    Chuy·ªÉn ƒë·ªïi ·∫£nh v·ªÅ numpy array, chu·∫©n h√≥a v·ªÅ kho·∫£ng [0,1]
    v√† √©p ki·ªÉu float32 ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi TensorFlow.
    """
    image = np.array(image, dtype=np.float32) / 255.0  # √âp ki·ªÉu float32
    return image[np.newaxis, ...]    # Th√™m batch dimension

processed_image = preprocess_image(image)
print("‚úÖ Image preprocessed successfully!")

# ---------------------------
# B∆∞·ªõc 4: D·ª± ƒëo√°n ·∫£nh
# ---------------------------
# 1. Th·ª±c hi·ªán d·ª± ƒëo√°n
predictions = model(processed_image).numpy()[0]
predicted_class = np.argmax(predictions)  # L·∫•y l·ªõp c√≥ x√°c su·∫•t cao nh·∫•t

print("üîé Predicted class index:", predicted_class)

# 2. T·∫£i danh s√°ch nh√£n t·ª´ ImageNet
labels_url = "https://storage.googleapis.com/download.tensorflow.org/data/ImageNetLabels.txt"
labels_path = tf.keras.utils.get_file("ImageNetLabels.txt", labels_url)

with open(labels_path, "r") as f:
    labels = f.read().splitlines()

# ‚ö†Ô∏è Danh s√°ch ImageNet b·∫Øt ƒë·∫ßu t·ª´ index 1, nh∆∞ng m√¥ h√¨nh d·ª± ƒëo√°n index t·ª´ 0
corrected_index = predicted_class + 1
predicted_label = labels[corrected_index] if corrected_index < len(labels) else "Unknown"

print(f"‚úÖ ·∫¢nh: {image_name} | D·ª± ƒëo√°n: **{predicted_label}**")

# ---------------------------
# B∆∞·ªõc 5: Hi·ªÉn th·ªã k·∫øt qu·∫£ tr√™n ·∫£nh
# ---------------------------
plt.imshow(image)
plt.title(f"·∫¢nh: {image_name}\nD·ª± ƒëo√°n: {predicted_label}")
plt.axis('off')
plt.show()
